# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `PepperMove.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module PepperMove
_M_PepperMove = Ice.openModule('PepperMove')
__name__ = 'PepperMove'

_M_PepperMove._t_Movement = IcePy.defineValue('::PepperMove::Movement', Ice.Value, -1, (), False, True, None, ())

if 'MovementPrx' not in _M_PepperMove.__dict__:
    _M_PepperMove.MovementPrx = Ice.createTempClass()
    class MovementPrx(Ice.ObjectPrx):

        def moveForward(self, context=None):
            return _M_PepperMove.Movement._op_moveForward.invoke(self, ((), context))

        def moveForwardAsync(self, context=None):
            return _M_PepperMove.Movement._op_moveForward.invokeAsync(self, ((), context))

        def begin_moveForward(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PepperMove.Movement._op_moveForward.begin(self, ((), _response, _ex, _sent, context))

        def end_moveForward(self, _r):
            return _M_PepperMove.Movement._op_moveForward.end(self, _r)

        def mMove(self, forward, sideways, angular, context=None):
            return _M_PepperMove.Movement._op_mMove.invoke(self, ((forward, sideways, angular), context))

        def mMoveAsync(self, forward, sideways, angular, context=None):
            return _M_PepperMove.Movement._op_mMove.invokeAsync(self, ((forward, sideways, angular), context))

        def begin_mMove(self, forward, sideways, angular, _response=None, _ex=None, _sent=None, context=None):
            return _M_PepperMove.Movement._op_mMove.begin(self, ((forward, sideways, angular), _response, _ex, _sent, context))

        def end_mMove(self, _r):
            return _M_PepperMove.Movement._op_mMove.end(self, _r)

        def returnImage(self, context=None):
            return _M_PepperMove.Movement._op_returnImage.invoke(self, ((), context))

        def returnImageAsync(self, context=None):
            return _M_PepperMove.Movement._op_returnImage.invokeAsync(self, ((), context))

        def begin_returnImage(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PepperMove.Movement._op_returnImage.begin(self, ((), _response, _ex, _sent, context))

        def end_returnImage(self, _r):
            return _M_PepperMove.Movement._op_returnImage.end(self, _r)

        def moveLeftArm(self, lspitch, lsroll, lelbowyaw, lelbowroll, context=None):
            return _M_PepperMove.Movement._op_moveLeftArm.invoke(self, ((lspitch, lsroll, lelbowyaw, lelbowroll), context))

        def moveLeftArmAsync(self, lspitch, lsroll, lelbowyaw, lelbowroll, context=None):
            return _M_PepperMove.Movement._op_moveLeftArm.invokeAsync(self, ((lspitch, lsroll, lelbowyaw, lelbowroll), context))

        def begin_moveLeftArm(self, lspitch, lsroll, lelbowyaw, lelbowroll, _response=None, _ex=None, _sent=None, context=None):
            return _M_PepperMove.Movement._op_moveLeftArm.begin(self, ((lspitch, lsroll, lelbowyaw, lelbowroll), _response, _ex, _sent, context))

        def end_moveLeftArm(self, _r):
            return _M_PepperMove.Movement._op_moveLeftArm.end(self, _r)

        def moveRightArm(self, lspitch, lsroll, lelbowyaw, lelbowroll, context=None):
            return _M_PepperMove.Movement._op_moveRightArm.invoke(self, ((lspitch, lsroll, lelbowyaw, lelbowroll), context))

        def moveRightArmAsync(self, lspitch, lsroll, lelbowyaw, lelbowroll, context=None):
            return _M_PepperMove.Movement._op_moveRightArm.invokeAsync(self, ((lspitch, lsroll, lelbowyaw, lelbowroll), context))

        def begin_moveRightArm(self, lspitch, lsroll, lelbowyaw, lelbowroll, _response=None, _ex=None, _sent=None, context=None):
            return _M_PepperMove.Movement._op_moveRightArm.begin(self, ((lspitch, lsroll, lelbowyaw, lelbowroll), _response, _ex, _sent, context))

        def end_moveRightArm(self, _r):
            return _M_PepperMove.Movement._op_moveRightArm.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_PepperMove.MovementPrx.ice_checkedCast(proxy, '::PepperMove::Movement', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_PepperMove.MovementPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::PepperMove::Movement'
    _M_PepperMove._t_MovementPrx = IcePy.defineProxy('::PepperMove::Movement', MovementPrx)

    _M_PepperMove.MovementPrx = MovementPrx
    del MovementPrx

    _M_PepperMove.Movement = Ice.createTempClass()
    class Movement(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PepperMove::Movement')

        def ice_id(self, current=None):
            return '::PepperMove::Movement'

        @staticmethod
        def ice_staticId():
            return '::PepperMove::Movement'

        def moveForward(self, current=None):
            raise NotImplementedError("servant method 'moveForward' not implemented")

        def mMove(self, forward, sideways, angular, current=None):
            raise NotImplementedError("servant method 'mMove' not implemented")

        def returnImage(self, current=None):
            raise NotImplementedError("servant method 'returnImage' not implemented")

        def moveLeftArm(self, lspitch, lsroll, lelbowyaw, lelbowroll, current=None):
            raise NotImplementedError("servant method 'moveLeftArm' not implemented")

        def moveRightArm(self, lspitch, lsroll, lelbowyaw, lelbowroll, current=None):
            raise NotImplementedError("servant method 'moveRightArm' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_PepperMove._t_MovementDisp)

        __repr__ = __str__

    _M_PepperMove._t_MovementDisp = IcePy.defineClass('::PepperMove::Movement', Movement, (), None, ())
    Movement._ice_type = _M_PepperMove._t_MovementDisp

    Movement._op_moveForward = IcePy.Operation('moveForward', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Movement._op_mMove = IcePy.Operation('mMove', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0)), (), None, ())
    Movement._op_returnImage = IcePy.Operation('returnImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Movement._op_moveLeftArm = IcePy.Operation('moveLeftArm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0)), (), None, ())
    Movement._op_moveRightArm = IcePy.Operation('moveRightArm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0)), (), None, ())

    _M_PepperMove.Movement = Movement
    del Movement

# End of module PepperMove
